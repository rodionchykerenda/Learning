import Foundation
/*:
# –ö–æ–ª–ª–µ–∫—Ü–∏–∏. –ú–∞—Å—Å–∏–≤—ã –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞

–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã —É–∑–Ω–∞–µ—à—å:
- –∫–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏
- —á—Ç–æ —Ç–∞–∫–æ–µ –º–∞—Å—Å–≤—ã –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞, —á–µ–º –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è
- —á—Ç–æ —Ç–∞–∫–æ–µ –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–π
- –∫–∞–∫–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Å–ø–æ—Å–æ–±—ã —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–æ–≤ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤
- –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º
- —á—Ç–æ —Ç–∞–∫–æ–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤

–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏:
- [–¢–∏–ø—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π](https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html)

–ó–∞–∫—Ä–µ–ø–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:

#### –ó–∞–¥–∞–Ω–∏–µ 1
 
- –û–±—å—è–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é _listOfNumbers_, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â—É—é —Å–æ–±–æ–π –º–∞—Å—Å–∏–≤, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ü—Ä–æ–∏—Ü–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ –ª—é–±—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
*/
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
print("-------TASK ‚Ññ1-------")
var listOfNumbers = [2 ,6 , 100, 3, 106, 7]

/*:
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
 - Example: üòâ\
 _Input:_\
 var listOfNumbers = [2 ,6 , 100, 3, 106, 7]\
 _Output:_\
 Max: 106
*/
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
print("\nTask 1.1:")
print(listOfNumbers.max(by: <) ?? "There are no max values")

/*:
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ –Ω–µ—á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –∏–∑ —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
 - Example: üòâ\
 _Input:_\
 listOfNumbers = [2 ,6 , 100, 3, 106, 7]\
 _Output:_\
 Odd numbers: 3, 7
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
print("\nTask 1.2:")
for item in listOfNumbers {
    if item % 2 != 0 {
        print(item)
    }
}
/*:
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—É–º–º—É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞.
 - Example: üòâ\
 _Input:_\
 listOfNumbers = [2 ,6 , 100, 3, 106, 7]\
 _Output:_\
 Sum: 224
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
print("\nTask 1.3:")
var sum = 0
for item in listOfNumbers {
    sum += item
}
print(sum)
/*:
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ —á–∏—Å–ª–∞ –∏–∑ —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –ø–æ –Ω–µ—á–µ—Ç–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞–º.
 - Example: üòâ\
 _Input:_\
 listOfNumbers = [2 ,6 , 100, 3, 106, 7]\
 _Output:_\
 Numbers with odd indexes: 6, 3, 7
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
print("\nTask 1.4:")
for index in 0..<listOfNumbers.count {
    if index % 2 != 0 {
        print(listOfNumbers[index])
    }
}
/*:
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —á–∏—Å–ª–∞ –∏–∑ —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
 - Example: üòâ\
 _Input:_\
 listOfNumbers = [2 ,6 , 100, 3, 106, 7]\
 _Output:_\
 Going back: 7, 106, 3, 100, 6, 2
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
print("\nTask 1.5:")
for index in stride(from: listOfNumbers.count - 1, to: -1, by: -1) {
    print(listOfNumbers[index])
}
/*:
 - –ü–æ–ª—É—á–∏ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –ø—É—Ç–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é.
 - –í—ã–≤–µ–¥–∏ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
 
 - Note: üëÜ _–î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–æ–¥ sorted(by:)_
 */
/*:
 - Example: üòâ\
 _Input:_\
 listOfNumbers = [2 ,6 , 100, 3, 106, 7]\
 _Output:_\
 Sorted array: [2, 3, 6, 7, 100, 106]
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
print("\nTask 1.6:")
let sortedArray = listOfNumbers.sorted(by: >)
print("Sorted array: \(sortedArray)")
/*:
 - –û–±—å—è–≤–∏ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é _x_ –∏ –ø—Ä–∏—Å–≤–æ–π –µ–π –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
  */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
let x = 3
/*:
 - –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–ª–∏—á–∏–µ _x_ –≤ –º–∞—Å—Å–∏–≤–µ _listOfNumbers_. –ï—Å–ª–∏ –µ—Å—Ç—å, –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å _true_, –µ—Å–ª–∏ –Ω–µ—Ç - _false_.
 - Example: üòâ\
 _Input:_\
 listOfNumbers = [2 ,6 , 100, 3, 106, 7]\
 x = 3\
 _Output:_\
 true
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
print("\nTask 1.7:")
var resultBool = false
for item in listOfNumbers {
    if item == x {
        resultBool = true
        break
    }
}
print(resultBool)
print("--------------------")

/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 2
 - –û–±—å—è–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é _otherNumbers_, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â—É—é —Å–æ–±–æ–π –º–∞—Å—Å–∏–≤, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ü—Ä–æ–∏—Ü–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ –ª—é–±—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.

 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
print("-------TASK ‚Ññ1-------")
var otherNumbers = [44 , 4, 12]

/*:
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ _listOfNumbers_, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –º–∞—Å—Å–∏–≤–µ _otherNumbers_.
 - Example: üòâ\
 _Input:_\
 listOfNumbers = [2 ,6 , 100, 3, 106, 7]\
 otherNumbers = [2 ,6, 12]\
 _Output:_\
 Intersection: [2, 6]
  */
/*:
 - Example: üòâ\
 _Input:_\
 listOfNumbers = [2 ,6 , 100, 3, 106, 7]\
 otherNumbers = [44 , 4, 12]\
 _Output:_\
 Intersection: No data
 
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
var resultArray = [Int]()
for i in otherNumbers {
    if listOfNumbers.contains(i) {
        resultArray.append(i)
    }
}


if resultArray.count == 0 {
    print("Intersection: No data")
} else {
    print("Intersection: \(resultArray)")
}
print("--------------------")
/*:
---
### –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å:

#### –ó–∞–¥–∞–Ω–∏–µ 3:
 - –°–æ–∑–¥–∞–π 10 —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç—Ä–∞–Ω. –û–±—ä—è–≤–∏ –º–∞—Å—Å–∏–≤, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç —Å—Ç—Ä–æ–∫–∏.
 - –ü—Ä–æ–≤–µ—Ä—å —Å—Ç—Ä–æ–∫–∏: –µ—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –±–æ–ª–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî –¥–æ–±–∞–≤—å –µ—ë –≤ –º–∞—Å—Å–∏–≤. –ù–æ –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—É –ê - –∑–∞–º–µ–Ω–∏ —ç—Ç—É –±—É–∫–≤—É –Ω–∞ –¥—Ä—É–≥—É—é –∏ –¥–æ–±–∞–≤—å –∏–∑–º–µ–Ω—ë–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤.
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤.
*/
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
print("\n-------TASK ‚Ññ3-------")
let firstCountry = "Ukraine"
let secondCountry = "France"
let thirdCountry = "Turkey"
let fourthCountry = "America"
let fifthCountry = "Egypt"

var stringArray: [String] = [firstCountry, secondCountry, thirdCountry, fourthCountry, fifthCountry, "Portugal", "Poland", "Wales", "Mexico", "Canada"]
var resultStringArray = [String]()
for string in stringArray {
    if string.count > 5 {
        if string.contains("a") {
            let newString = string.replacingOccurrences(of: "a", with: "+", options: .literal, range: nil)
            resultStringArray.append(newString)
        } else {
            resultStringArray.append(string)
        }
    }
}
print("Result string array: \(resultStringArray)")
print("--------------------")

/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 4:
 - –°–æ–∑–¥–∞–π –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ a –∏ b, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç —Ü–µ–ª—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.
 - –°–æ–∑–¥–∞–π –¥–≤–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ aSet –∏ bSet, –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏–∏ —ç—Ç–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å true, –µ—Å–ª–∏  –º–Ω–æ–∂–µ—Ç—Å–≤–æ aSet —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ–º bSet, false - –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
*/
/*:
- Example: üòâ\
_Input:_\
subset =([1, 3], [1, 3, 3, 5])\
_Output:_\
True
*/
/*:
- Example: üòâ\
_Input:_\
subset([1, 3, 10], [10, 8, 8, 8]))\
_Output:_\
False
*/

// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
print("\n-------TASK ‚Ññ4-------")
let a = [1, 3, 1, 5, 6]
let b = [1, 3, 3, 5, 8, 9]

let aSet: Set = Set(Array(a[0...2]))
let bSet: Set = Set(Array(b[0...4]))

print(aSet.isSubset(of: bSet))
print("--------------------")
//: [–ù–∞–∑–∞–¥: –ü—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö](@previous)  |  –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4  |  [–í–ø–µ—Ä–µ–¥: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–º](@next)


